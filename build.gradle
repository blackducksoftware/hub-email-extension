buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.11'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }
tasks.withType(GroovyCompile) { options.encoding = 'UTF-8' }

group = 'com.blackducksoftware.integration'
version = '1.2.1-SNAPSHOT'
description = ''

mainClassName = 'com.blackducksoftware.integration.email.Application'
applicationDefaultJvmArgs = [
    '-DAPP_HOME=APP_HOME_VAR_TOKEN',
    '-Dlog4j.configurationFile=APP_HOME_VAR_TOKEN/config/log4j.xml',
    '-Dext.config.location=APP_HOME_VAR_TOKEN/config'
]

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://maven.restlet.com" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {
    compile 'com.blackducksoftware.integration:hub-common:18.0.1'

    compile 'org.slf4j:slf4j-api:1.7.21'
	compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.6.2'
	compile 'org.apache.logging.log4j:log4j-core:2.6.2'
	runtime 'org.restlet.jse:org.restlet.ext.slf4j:2.3.7'
	runtime 'org.restlet.jse:org.restlet.ext.jetty:2.3.7'
	runtime 'org.restlet.jse:org.restlet.ext.gson:2.3.7'
	
	compile 'org.apache.commons:commons-lang3:3.4'
	compile 'commons-io:commons-io:2.5'
	compile 'commons-cli:commons-cli:1.3.1'
	compile 'com.google.code.gson:gson:2.7'
	compile 'org.jsoup:jsoup:1.9.2'
	compile 'javax.mail:mail:1.4.7'
	compile 'org.freemarker:freemarker:2.3.25-incubating'
	compile 'org.quartz-scheduler:quartz:2.2.1'
	compile 'org.quartz-scheduler:quartz-jobs:2.2.1'	
	
	// hub-extension specific dependencies.
    compile 'com.google.code.findbugs:jsr305:3.0.1'
    compile 'com.google.guava:guava:19.0'
    compile 'org.restlet.jse:org.restlet.ext.oauth:2.3.7'
    compile 'org.restlet.jse:org.restlet.ext.jackson:2.3.7'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-all:1.10.19'
}

task extPropsCopy(type:Copy) {
    from 'src/main/resources/extension.properties'
    into 'build/'
}

task modifyExtVersionProperty(dependsOn: extPropsCopy) {
    doLast {
        File extFile = file('build/extension.properties')
        if(extFile.exists()) {
            ant.propertyfile(file: extFile ) {
                entry(key: "hub.extension.version", value: version)
            }
        } else {
            println "extension.properties file does not exist in build directory"
        }
    }
}

jar {
    sourceSets {
        main {
            resources {
                exclude 'extension.properties'
                exclude '**/images/*'
                exclude 'images'
                exclude '**/templates/*'
                exclude 'templates'
                exclude 'log4j.xml'
                exclude 'config-options.json'
                exclude 'user-config-options.json'
                exclude 'quartz.properties'
                exclude 'email_extension.sh'
                exclude 'testform.html'
            }
        }
    }
}

startScripts {
    classpath+= files('src/main/resources/quartz.properties')
    doLast {
        unixScript.text = unixScript.text.replace("APP_HOME_VAR_TOKEN", "\$APP_HOME")
        windowsScript.text = windowsScript.text.replace("APP_HOME_VAR_TOKEN", "%APP_HOME%")
        unixScript.text = unixScript.text.replace("lib/quartz.properties" ,"config/quartz.properties")
        windowsScript.text = windowsScript.text.replace("lib\\quartz.properties" ,"config\\quartz.properties")
    }
}

distributions {
    main {
        contents {
            from('src/main/resources/email_extension.sh') {into 'bin/'}
            from('src/main/resources/images/') {into 'images/'}
            from('src/main/resources/templates/') {into 'templates/'}

            from('build/extension.properties') {into 'config/'}
            from('src/main/resources/log4j.xml') {into 'config/'}
            from('src/main/resources/config-options.json') {into 'config/'}
            from('src/main/resources/user-config-options.json') {into 'config/'}
            from('src/main/resources/quartz.properties') {into 'config/'}
            from('src/main/resources/web/') {into 'web/'}
        }
    }
}

task stageDocker(type:Copy) {
	into "${project.buildDir}/docker"
	from("${project.projectDir}") {
		include 'Dockerfile'
		include 'src/docker/resources/**'
	}
	into('build/distributions') {
		from distTar
	}
}

task buildDockerImage(type:DockerBuildImage) {
    dependsOn stageDocker
    inputDir = file("${project.buildDir}/docker")
    tag = "blackducksoftware/${project.name}:${project.version}"
    buildArgs = [ 'VERSION': "${project.version}" ]
}

task pushImage(type:Exec, dependsOn: [buildDockerImage]) {
    commandLine "docker", "push", "blackducksoftware/${project.name}:${project.version}"
}

tasks.processResources.dependsOn modifyExtVersionProperty

task all(dependsOn: [build, buildDockerImage, pushImage]) {}
